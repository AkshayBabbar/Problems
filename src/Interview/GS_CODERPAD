// import java.util.ArrayList;
// import java.util.List;
// import java.util.HashMap;
// import java.util.Map;

// /* Problem Name is &&& Best Average Grade &&& PLEASE DO NOT REMOVE THIS LINE. */


// /*
//  **  Instructions:
//  **
//  **  Given a list of student test scores, find the best average grade.
//  **  Each student may have more than one test score in the list.
//  **
//  **  Complete the bestAverageGrade function in the editor below.
//  **  It has one parameter, scores, which is an array of student test scores.
//  **  Each element in the array is a two-element array of the form [student name, test score]
//  **  e.g. [ "Bobby", "87" ].
//  **  Test scores may be positive or negative integers.
//  **
//  **  If you end up with an average grade that is not an integer, you should
//  **  use a floor function to return the largest integer less than or equal to the average.
//  **  Return 0 for an empty input.
//  **
//  **  Example:
//  **
//  **  Input:
//  **  [["Bobby", "87"],
//  **   ["Charles", "100"],
//  **   ["Eric", "64"],
//  **   ["Charles", "22"]].
//  **
//  **  Expected output: 87
//  **  Explanation: The average scores are 87, 61, and 64 for Bobby, Charles, and Eric,
//  **  respectively. 87 is the highest.
//  */

// class src.Interview.hackerranktest.MorganStanley.Solution {
//   /*
//    **  Find the best average grade.
//    */
//   public static int bestAverageGrade(String[][] scores) {
//     // TODO: implement this function
//     // negative Scenario:
//     if(scores == null || scores.length == 0){
//       return 0;
//     }

//     HashMap<String, ArrayList<Integer>> map = new HashMap<>();

//     for(int i =0; i<scores.length; i++){
//       // name = [i][0];
//       // marks = [i][1];
//       String name = scores[i][0];
//       if(map.containsKey(scores[i][0])){
//         ArrayList<Integer> score = map.get(name);
//         score.add(Integer.parseInt(scores[i][1]));
//         map.put(scores[i][0],score);
//     }
//     else{
//       ArrayList<Integer> score = new ArrayList<Integer>();
//       score.add(Integer.parseInt(scores[i][1]));
//       map.put(name,score);
//     }

//     }
//     int max = Integer.MIN_VALUE;
//     for(Map.Entry<String, ArrayList<Integer>> entry : map.entrySet()){
//       String key = entry.getKey();
//       ArrayList<Integer> value =entry.getValue();
//       int sum = 0;
//       for(int j =0 ; j<value.size();j++){
//         sum +=value.get(j);
//       }
//       int average = sum/value.size();
//       if(average>max){
//         max = average;
//     }

//   }
//     return max;
// }

//   /*
//    **  Returns true if the tests pass. Otherwise, returns false;
//    */
//   public static boolean doTestsPass() {
//     // TODO: implement more test cases
//     String[][] tc1 = {
//         {"Bobby", "10"},
//         {"Charles", "100"},
//         {"Eric", "10"},
//         {"Charles", "22"},
//         {"Charles", "10"}};
//     return bestAverageGrade(tc1) == 44;
//   }

//   /*
//    **  Execution entry point.
//    */
//   public static void main(String[] args) {
//     // Run the tests
//     if (doTestsPass()) {
//       System.out.println("All tests pass");
//     }
//     else {
//       System.out.println("Tests fail.");
//     }
//   }
// }

/* Problem Name is &&& Run Length Encoding &&& PLEASE DO NOT REMOVE THIS LINE. */

import org.junit.*;
import org.junit.runner.*;
import static org.junit.Assert.*;

 /**
 **  * Instructions to candidate.
 **  *  1) Run this code in the REPL to observe its behaviour.
 **  *  2) Consider adding some additional tests in doTestsPass().
 **  *  3) Implement rle() correctly.
 **  *  4) If time permits, try to improve your implementation.
 **


 * Implement a run length encoding function.
 *
 * For a string input the function returns output encoded as follows:
 *
 * "a"     -> "a1"
 * "aa"    -> "a2"
 * "aabbb" -> "a2b3"
 * "abaaba" -> "a1b1a2b1a1"
 * "aabbbaa" -> "a2b3a2"
 * ""      -> ""
 *
 */
public class src.Interview.hackerranktest.MorganStanley.Solution {

  public static String rle(String input) {
    StringBuilder output = new StringBuilder();

    if (input.length() <1){
      return "";
    }

    for(int i =0; i<input.length();i++){
     int count =1;

     output.append(input.charAt(i));
     while(i<input.length()-1 && input.charAt(i) == input.charAt(i+1) ){
        count++;
        i++;
    }
    output.append(count);
    count =0;
    }

   return output.toString();
  }

  @Test
  public void doTestsPass(){
    assertEquals("",rle(""));
    assertEquals("a1",rle("a"));
    assertEquals("a3",rle("aaa"));
    assertEquals("a3b3a2d1",rle("aaabbbaad"));
    assertEquals("w1t3h1b1c3",rle("wttthbccc"));
    assertEquals("a1b1a2b1a1",rle("abaaba"));
  }

  public static void main(String[] args) throws InterruptedException     {
    JUnitCore.main("src.Interview.hackerranktest.MorganStanley.Solution");
  }
}